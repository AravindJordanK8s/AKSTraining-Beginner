trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

stages:
# Build Stage 
- stage: Build
  displayName: Build Stage
  jobs:
  - job: Build
    displayName: Build Job
    steps:         
    - bash: echo Files in Source Repository; ls -R $(System.DefaultWorkingDirectory)/VotingApp
    - task: CopyFiles@2
      displayName: Copying files from Source to Artifact Directory
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/VotingApp'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/VotingApp'
        OverWrite: true
    - bash: echo Files in Artifact Staging Directory; ls -R $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      displayName: Publishing Kube Manifest files
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'kube-manifests'
        publishLocation: 'Container'
- stage: Deploy
  displayName: Deploy Stage
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Downloading kube-manifests
      inputs:
        buildType: 'current'
        artifactName: 'kube-manifests'
        targetPath: '$(Pipeline.Workspace)'

    - task: KubernetesManifest@1
      displayName: Deploy Kube Manifests to AKS
      inputs:
        action: 'deploy'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: 'aks-svc'
        namespace: 'default'
        manifests: |
          $(Pipeline.Workspace)/VotingApp/vote-app-service.yaml
          $(Pipeline.Workspace)/VotingApp/vote-app-deployment.yaml
          $(Pipeline.Workspace)/VotingApp/redis-deployment.yaml
          $(Pipeline.Workspace)/VotingApp/redis-service.yaml
          $(Pipeline.Workspace)/VotingApp/worker-app-deployment.yaml
          $(Pipeline.Workspace)/VotingApp/postgres-deployment.yaml
          $(Pipeline.Workspace)/VotingApp/postgres-secret.yaml
          $(Pipeline.Workspace)/VotingApp/postgres-service.yaml
          $(Pipeline.Workspace)/VotingApp/result-app-deployment.yaml
          $(Pipeline.Workspace)/VotingApp/result-service.yaml